<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Operating System on ZonePG</title>
    <link>https://zonepg.github.io/tags/operating-system/</link>
    <description>Recent content in Operating System on ZonePG</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>@ ZonePG</copyright>
    <lastBuildDate>Tue, 29 Jun 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://zonepg.github.io/tags/operating-system/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>解决 M1 MAC 的 Qemu 使用问题</title>
      <link>https://zonepg.github.io/posts/programming/os/2021-06-29-m1-mac-qemu/</link>
      <pubDate>Tue, 29 Jun 2021 00:00:00 +0000</pubDate>
      
      <guid>https://zonepg.github.io/posts/programming/os/2021-06-29-m1-mac-qemu/</guid>
      <description>本文可以帮助在M1 MAC上搭建起riscv32-system-qemu或riscv64-system-qemu的环境，不过仅适用与5.1.0版本的Qemu。
[2021-11-26] 更新 6.1+ 版本的 Qemu 已解决该问题。
问题重现 M1 Mac拿到手几个月内，因为一些软件的架构适配问题，十分头疼，其中包括Qemu的使用问题。
例如我在Github MIT 的 xv6 仓库提的一个issue， 当使用5.x.0以及6.0.0版本的Qemu会出现这样的情况：qemu-system-riscv64: qemu_mprotect__osdep: mprotect failed: Permission denied， 其原因可能是苹果的内存保护问题。
也尝试了rCore-Tutorial-Book-v3仓库的解决方案(issue)， 使用最新的补丁版本Qemu仓库，并对util/osdep.c文件作修改，虽然没有出现上面了情况了，系统启动会卡住。 以及 Qemu-5.2.0 不支持 RustSBI。
解决方案 google 了多方资料，最终发现了一个暂时可行的解决方案，如下方式可以在 M1 Mac上跑起来 Qemu。
下载 5.1.0 版本的 Qemu（6.0.0 打补丁后仍有问题） 下载这个补丁patch(series)，将其存放于Qemu的上级目录，patch -p1 &amp;lt; ../patch/v2-tcg-Fix-execution-on-Apple-Silicon.patch安装补丁。 修改util/osdep.c文件的函数 int qemu_mprotect_none(void *addr, size_t size) { #ifdef _WIN32 return qemu_mprotect__osdep(addr, size, PAGE_NOACCESS); #elif defined(__APPLE__) &amp;amp;&amp;amp; defined(__arm64__) /* Workaround mprotect (RWX-&amp;gt;NONE) issue on Big Sur 11.2 */ return 0; #else return qemu_mprotect__osdep(addr, size, PROT_NONE); 最后安装编译安装Qeme，并将build文件夹与build/riscv64-softmmu文件夹加入环境变量中 mkdir build &amp;amp;&amp;amp; cd build .</description>
    </item>
    
    <item>
      <title>chcore 环境搭建(WSL2)</title>
      <link>https://zonepg.github.io/posts/programming/os/2021-04-20-chcore-setup/</link>
      <pubDate>Mon, 19 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://zonepg.github.io/posts/programming/os/2021-04-20-chcore-setup/</guid>
      <description>课程主页实验资料的虚拟机镜像打不开，无法下载，故选择自己用 WSL2 Ubuntu20.04(当然虚拟机的Ubuntu20.04或者直接系统，应该也没问题) 搭建 x86 运行的 ARM 环境。(由于网络环境限制，部分过程需要科学上网)
WSL2 下载 Docker curl -fsSL https://get.docker.com -o get-docker.sh sudo sh get-docker.sh sudo service docker start # 启动 docker, 关闭 docker 为 stop 安装交叉编译工具链 chcore的交叉编译工具链已经用 docker 封装好了，我们只需要下载镜像即可
sudo docker pull ipads/chcore_builder:v1.0 Qemu 模拟器安装 我的使用的是 Qemu 5.0.0 版本，首先安装依赖包，并手动编译
sudo apt install autoconf automake autotools-dev curl libmpc-dev libmpfr-dev libgmp-dev \ gawk build-essential bison flex texinfo gperf libtool patchutils bc \ zlib1g-dev libexpat-dev pkg-config libglib2.0-dev libpixman-1-dev git tmux python3 wget https://download.</description>
    </item>
    
  </channel>
</rss>
